
tiny25_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000015c  000001f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800064  00800064  000001f4  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000061  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000f4  00000000  00000000  00000275  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000007b  00000000  00000000  00000369  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000156  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000e4  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	41 c0       	rjmp	.+130    	; 0x86 <__vector_1>
   4:	25 c0       	rjmp	.+74     	; 0x50 <__bad_interrupt>
   6:	24 c0       	rjmp	.+72     	; 0x50 <__bad_interrupt>
   8:	23 c0       	rjmp	.+70     	; 0x50 <__bad_interrupt>
   a:	58 c0       	rjmp	.+176    	; 0xbc <__vector_5>
   c:	21 c0       	rjmp	.+66     	; 0x50 <__bad_interrupt>
   e:	20 c0       	rjmp	.+64     	; 0x50 <__bad_interrupt>
  10:	1f c0       	rjmp	.+62     	; 0x50 <__bad_interrupt>
  12:	1e c0       	rjmp	.+60     	; 0x50 <__bad_interrupt>
  14:	1d c0       	rjmp	.+58     	; 0x50 <__bad_interrupt>
  16:	1c c0       	rjmp	.+56     	; 0x50 <__bad_interrupt>
  18:	1b c0       	rjmp	.+54     	; 0x50 <__bad_interrupt>
  1a:	1a c0       	rjmp	.+52     	; 0x50 <__bad_interrupt>
  1c:	19 c0       	rjmp	.+50     	; 0x50 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf ed       	ldi	r28, 0xDF	; 223
  24:	cd bf       	out	0x3d, r28	; 61

00000026 <__do_copy_data>:
  26:	10 e0       	ldi	r17, 0x00	; 0
  28:	a0 e6       	ldi	r26, 0x60	; 96
  2a:	b0 e0       	ldi	r27, 0x00	; 0
  2c:	ec e5       	ldi	r30, 0x5C	; 92
  2e:	f1 e0       	ldi	r31, 0x01	; 1
  30:	02 c0       	rjmp	.+4      	; 0x36 <.do_copy_data_start>

00000032 <.do_copy_data_loop>:
  32:	05 90       	lpm	r0, Z+
  34:	0d 92       	st	X+, r0

00000036 <.do_copy_data_start>:
  36:	a4 36       	cpi	r26, 0x64	; 100
  38:	b1 07       	cpc	r27, r17
  3a:	d9 f7       	brne	.-10     	; 0x32 <.do_copy_data_loop>

0000003c <__do_clear_bss>:
  3c:	10 e0       	ldi	r17, 0x00	; 0
  3e:	a4 e6       	ldi	r26, 0x64	; 100
  40:	b0 e0       	ldi	r27, 0x00	; 0
  42:	01 c0       	rjmp	.+2      	; 0x46 <.do_clear_bss_start>

00000044 <.do_clear_bss_loop>:
  44:	1d 92       	st	X+, r1

00000046 <.do_clear_bss_start>:
  46:	a9 36       	cpi	r26, 0x69	; 105
  48:	b1 07       	cpc	r27, r17
  4a:	e1 f7       	brne	.-8      	; 0x44 <.do_clear_bss_loop>
  4c:	02 d0       	rcall	.+4      	; 0x52 <main>
  4e:	84 c0       	rjmp	.+264    	; 0x158 <_exit>

00000050 <__bad_interrupt>:
  50:	d7 cf       	rjmp	.-82     	; 0x0 <__vectors>

00000052 <main>:
volatile uint32_t counter;


int main(void)
{
DDRB |= _BV(4);		//output for transistor
  52:	bc 9a       	sbi	0x17, 4	; 23
PORTB &= ~_BV(4);	//start as low (transistor off)
  54:	c4 98       	cbi	0x18, 4	; 24
DDRB &= ~_BV(2);	//INT0 input for switch on 
  56:	ba 98       	cbi	0x17, 2	; 23

// The low level of INT0 generates an interrupt request.
MCUCR |= (0 << ISC00) | (0 << ISC01); 
  58:	85 b7       	in	r24, 0x35	; 53
  5a:	85 bf       	out	0x35, r24	; 53

// Enable INT0 pin change 
GIMSK |= (1 << INT0);
  5c:	8b b7       	in	r24, 0x3b	; 59
  5e:	80 64       	ori	r24, 0x40	; 64
  60:	8b bf       	out	0x3b, r24	; 59

// Select Timer0 clock prescaler 1024
TCCR0B |= (1 << CS00) | (1 << CS02);
  62:	83 b7       	in	r24, 0x33	; 51
  64:	85 60       	ori	r24, 0x05	; 5
  66:	83 bf       	out	0x33, r24	; 51

// Enable Timer0 overflow interrupt
TIMSK |= (1 << TOIE0);
  68:	89 b7       	in	r24, 0x39	; 57
  6a:	82 60       	ori	r24, 0x02	; 2
  6c:	89 bf       	out	0x39, r24	; 57

// Enable the Global Interrupt Enable flag so that interrupts can be processed 
sei(); 
  6e:	78 94       	sei

// Prepare for sleep mode in Power Down mode
set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  70:	85 b7       	in	r24, 0x35	; 53
  72:	87 7e       	andi	r24, 0xE7	; 231
  74:	80 61       	ori	r24, 0x10	; 16
  76:	85 bf       	out	0x35, r24	; 53

while(1)
{
// Leep the MCU in sleep mode all the time
sleep_mode();
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	80 62       	ori	r24, 0x20	; 32
  7c:	85 bf       	out	0x35, r24	; 53
  7e:	88 95       	sleep
  80:	85 b7       	in	r24, 0x35	; 53
  82:	8f 7d       	andi	r24, 0xDF	; 223
  84:	f8 cf       	rjmp	.-16     	; 0x76 <main+0x24>

00000086 <__vector_1>:
}



ISR(INT0_vect)       
{
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
PORTB |= _BV(4);	// Enable the transistor output
  92:	c4 9a       	sbi	0x18, 4	; 24
counter = 0;		// Reset the counter
  94:	10 92 64 00 	sts	0x0064, r1
  98:	10 92 65 00 	sts	0x0065, r1
  9c:	10 92 66 00 	sts	0x0066, r1
  a0:	10 92 67 00 	sts	0x0067, r1
start_flag = 1; 	// Set start flag to 1 so we start counting in Timer0 interrupt routine
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 68 00 	sts	0x0068, r24

// Prepare for sleep mode in Idle mode so Timer0 can continue working and providing interrupts
set_sleep_mode(SLEEP_MODE_IDLE); 
  aa:	85 b7       	in	r24, 0x35	; 53
  ac:	87 7e       	andi	r24, 0xE7	; 231
  ae:	85 bf       	out	0x35, r24	; 53
}
  b0:	8f 91       	pop	r24
  b2:	0f 90       	pop	r0
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	0f 90       	pop	r0
  b8:	1f 90       	pop	r1
  ba:	18 95       	reti

000000bc <__vector_5>:


ISR(TIMER0_OVF_vect)
{
  bc:	1f 92       	push	r1
  be:	0f 92       	push	r0
  c0:	0f b6       	in	r0, 0x3f	; 63
  c2:	0f 92       	push	r0
  c4:	11 24       	eor	r1, r1
  c6:	2f 93       	push	r18
  c8:	3f 93       	push	r19
  ca:	4f 93       	push	r20
  cc:	5f 93       	push	r21
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
if(start_flag)
  d6:	80 91 68 00 	lds	r24, 0x0068
  da:	88 23       	and	r24, r24
  dc:	81 f1       	breq	.+96     	; 0x13e <__stack+0x5f>
	{
	if(counter < setpoint)
  de:	20 91 64 00 	lds	r18, 0x0064
  e2:	30 91 65 00 	lds	r19, 0x0065
  e6:	40 91 66 00 	lds	r20, 0x0066
  ea:	50 91 67 00 	lds	r21, 0x0067
  ee:	80 91 60 00 	lds	r24, 0x0060
  f2:	90 91 61 00 	lds	r25, 0x0061
  f6:	a0 91 62 00 	lds	r26, 0x0062
  fa:	b0 91 63 00 	lds	r27, 0x0063
  fe:	28 17       	cp	r18, r24
 100:	39 07       	cpc	r19, r25
 102:	4a 07       	cpc	r20, r26
 104:	5b 07       	cpc	r21, r27
 106:	a0 f4       	brcc	.+40     	; 0x130 <__stack+0x51>
		{
		counter++;			// increment counter until setpoint is reached
 108:	80 91 64 00 	lds	r24, 0x0064
 10c:	90 91 65 00 	lds	r25, 0x0065
 110:	a0 91 66 00 	lds	r26, 0x0066
 114:	b0 91 67 00 	lds	r27, 0x0067
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	a1 1d       	adc	r26, r1
 11c:	b1 1d       	adc	r27, r1
 11e:	80 93 64 00 	sts	0x0064, r24
 122:	90 93 65 00 	sts	0x0065, r25
 126:	a0 93 66 00 	sts	0x0066, r26
 12a:	b0 93 67 00 	sts	0x0067, r27
 12e:	07 c0       	rjmp	.+14     	; 0x13e <__stack+0x5f>
		} 
	else 
		{
		
		PORTB &= ~_BV(4); 	// setpoint reached turn off transistor output
 130:	c4 98       	cbi	0x18, 4	; 24
		start_flag = 0;		// setpoint reached, stop counting in Timer0 interrupt routine
 132:	10 92 68 00 	sts	0x0068, r1
		set_sleep_mode(SLEEP_MODE_PWR_DOWN);	// Prepare for sleep mode in Power Down mode
 136:	85 b7       	in	r24, 0x35	; 53
 138:	87 7e       	andi	r24, 0xE7	; 231
 13a:	80 61       	ori	r24, 0x10	; 16
 13c:	85 bf       	out	0x35, r24	; 53
		}
	}
}
 13e:	bf 91       	pop	r27
 140:	af 91       	pop	r26
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <_exit>:
 158:	f8 94       	cli

0000015a <__stop_program>:
 15a:	ff cf       	rjmp	.-2      	; 0x15a <__stop_program>
